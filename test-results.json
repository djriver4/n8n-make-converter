
> my-v0-project@0.1.0 test
> jest --json

{"numFailedTestSuites":13,"numFailedTests":9,"numPassedTestSuites":3,"numPassedTests":49,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":11,"numTodoTests":0,"numTotalTestSuites":16,"numTotalTests":58,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1741926205342,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["NodeParameterProcessor","convertN8nToMakeParameters"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"NodeParameterProcessor convertN8nToMakeParameters should convert simple n8n parameters to Make format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should convert simple n8n parameters to Make format"},{"ancestorTitles":["NodeParameterProcessor","convertN8nToMakeParameters"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"NodeParameterProcessor convertN8nToMakeParameters should convert n8n expressions to Make.com format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should convert n8n expressions to Make.com format"},{"ancestorTitles":["NodeParameterProcessor","convertN8nToMakeParameters"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"NodeParameterProcessor convertN8nToMakeParameters should handle nested parameters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle nested parameters"},{"ancestorTitles":["NodeParameterProcessor","convertN8nToMakeParameters"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"NodeParameterProcessor convertN8nToMakeParameters should handle arrays of parameters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle arrays of parameters"},{"ancestorTitles":["NodeParameterProcessor","convertN8nToMakeParameters"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"NodeParameterProcessor convertN8nToMakeParameters should transform advanced functions from n8n to Make","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should transform advanced functions from n8n to Make"},{"ancestorTitles":["NodeParameterProcessor","convertN8nToMakeParameters"],"duration":5,"failureDetails":[{"matcherResult":{"actual":{"greeting":"Hello, {{ 1.name }}!","message":"Your order #{{ 1.orderId }} will arrive on {{ formatDate(1.deliveryDate, \"MMM Do\") }}"},"expected":{"greeting":"Hello, {{1.name}}!","message":"Your order #{{1.orderId}} will arrive on {{formatDate(1.deliveryDate, \"MMM Do\")}}"},"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Object {\n-   \"greeting\": \"Hello, {{1.name}}!\",\n-   \"message\": \"Your order #{{1.orderId}} will arrive on {{formatDate(1.deliveryDate, \\\"MMM Do\\\")}}\",\n+   \"greeting\": \"Hello, {{ 1.name }}!\",\n+   \"message\": \"Your order #{{ 1.orderId }} will arrive on {{ formatDate(1.deliveryDate, \\\"MMM Do\\\") }}\",\n  }","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Object {\n-   \"greeting\": \"Hello, {{1.name}}!\",\n-   \"message\": \"Your order #{{1.orderId}} will arrive on {{formatDate(1.deliveryDate, \\\"MMM Do\\\")}}\",\n+   \"greeting\": \"Hello, {{ 1.name }}!\",\n+   \"message\": \"Your order #{{ 1.orderId }} will arrive on {{ formatDate(1.deliveryDate, \\\"MMM Do\\\") }}\",\n  }\n    at Object.<anonymous> (/Users/davidrivera/Downloads/n8n-make-converter/__tests__/unit/converters/parameter-processor.test.ts:88:22)\n    at Promise.then.completed (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"NodeParameterProcessor convertN8nToMakeParameters should handle embedded expressions in strings","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle embedded expressions in strings"},{"ancestorTitles":["NodeParameterProcessor","convertMakeToN8nParameters"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"NodeParameterProcessor convertMakeToN8nParameters should convert simple Make parameters to n8n format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should convert simple Make parameters to n8n format"},{"ancestorTitles":["NodeParameterProcessor","convertMakeToN8nParameters"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"NodeParameterProcessor convertMakeToN8nParameters should convert Make.com expressions to n8n format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should convert Make.com expressions to n8n format"},{"ancestorTitles":["NodeParameterProcessor","convertMakeToN8nParameters"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"NodeParameterProcessor convertMakeToN8nParameters should handle nested parameters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle nested parameters"},{"ancestorTitles":["NodeParameterProcessor","convertMakeToN8nParameters"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"NodeParameterProcessor convertMakeToN8nParameters should handle arrays of parameters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle arrays of parameters"},{"ancestorTitles":["NodeParameterProcessor","convertMakeToN8nParameters"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"NodeParameterProcessor convertMakeToN8nParameters should transform advanced functions from Make to n8n","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should transform advanced functions from Make to n8n"},{"ancestorTitles":["NodeParameterProcessor","convertMakeToN8nParameters"],"duration":1,"failureDetails":[{"matcherResult":{"actual":{"greeting":"Hello, ={{ $json.name }}!","message":"Your order #={{ $json.orderId }} will arrive on ={{ $date.format($json.deliveryDate, \"MMM Do\") }}"},"expected":{"greeting":"Hello, {{ $json.name }}!","message":"Your order #{{ $json.orderId }} will arrive on {{ $date.format($json.deliveryDate, \"MMM Do\") }}!"},"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Object {\n-   \"greeting\": \"Hello, {{ $json.name }}!\",\n-   \"message\": \"Your order #{{ $json.orderId }} will arrive on {{ $date.format($json.deliveryDate, \\\"MMM Do\\\") }}!\",\n+   \"greeting\": \"Hello, ={{ $json.name }}!\",\n+   \"message\": \"Your order #={{ $json.orderId }} will arrive on ={{ $date.format($json.deliveryDate, \\\"MMM Do\\\") }}\",\n  }","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Object {\n-   \"greeting\": \"Hello, {{ $json.name }}!\",\n-   \"message\": \"Your order #{{ $json.orderId }} will arrive on {{ $date.format($json.deliveryDate, \\\"MMM Do\\\") }}!\",\n+   \"greeting\": \"Hello, ={{ $json.name }}!\",\n+   \"message\": \"Your order #={{ $json.orderId }} will arrive on ={{ $date.format($json.deliveryDate, \\\"MMM Do\\\") }}\",\n  }\n    at Object.<anonymous> (/Users/davidrivera/Downloads/n8n-make-converter/__tests__/unit/converters/parameter-processor.test.ts:179:22)\n    at Promise.then.completed (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"NodeParameterProcessor convertMakeToN8nParameters should handle embedded expressions in strings","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle embedded expressions in strings"},{"ancestorTitles":["NodeParameterProcessor","identifyExpressionsForReview"],"duration":2,"failureDetails":[{"matcherResult":{"message":"expect(received).toContain(expected) // indexOf\n\nExpected value: \"Node type, parameter complexExpression1\"\nReceived array: [\"Node simpleExpression\", \"Node complexExpression1\", \"Node complexExpression2\", \"Node nested, parameter complexDate\"]","pass":false}}],"failureMessages":["Error: expect(received).toContain(expected) // indexOf\n\nExpected value: \"Node type, parameter complexExpression1\"\nReceived array: [\"Node simpleExpression\", \"Node complexExpression1\", \"Node complexExpression2\", \"Node nested, parameter complexDate\"]\n    at Object.<anonymous> (/Users/davidrivera/Downloads/n8n-make-converter/__tests__/unit/converters/parameter-processor.test.ts:201:35)\n    at Promise.then.completed (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"NodeParameterProcessor identifyExpressionsForReview should identify complex expressions that need review","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should identify complex expressions that need review"},{"ancestorTitles":["NodeParameterProcessor","evaluateExpressions"],"duration":2,"failureDetails":[{"matcherResult":{"actual":{"greeting":"\"Hello, \" + $json.name","items":null},"expected":{"greeting":"Hello, John","items":["Product 1","Product 2"]},"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 5\n+ Received  + 2\n\n  Object {\n-   \"greeting\": \"Hello, John\",\n-   \"items\": Array [\n-     \"Product 1\",\n-     \"Product 2\",\n-   ],\n+   \"greeting\": \"\\\"Hello, \\\" + $json.name\",\n+   \"items\": null,\n  }","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 5\n+ Received  + 2\n\n  Object {\n-   \"greeting\": \"Hello, John\",\n-   \"items\": Array [\n-     \"Product 1\",\n-     \"Product 2\",\n-   ],\n+   \"greeting\": \"\\\"Hello, \\\" + $json.name\",\n+   \"items\": null,\n  }\n    at Object.<anonymous> (/Users/davidrivera/Downloads/n8n-make-converter/__tests__/unit/converters/parameter-processor.test.ts:229:22)\n    at Promise.then.completed (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"NodeParameterProcessor evaluateExpressions should evaluate expressions using the provided context","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should evaluate expressions using the provided context"},{"ancestorTitles":["NodeParameterProcessor","evaluateExpressions"],"duration":1,"failureDetails":[{"matcherResult":{"actual":{"user":{"fullName":null,"isAdmin":null}},"expected":{"user":{"fullName":"Jane Doe","isAdmin":true}},"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Object {\n    \"user\": Object {\n-     \"fullName\": \"Jane Doe\",\n-     \"isAdmin\": true,\n+     \"fullName\": null,\n+     \"isAdmin\": null,\n    },\n  }","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Object {\n    \"user\": Object {\n-     \"fullName\": \"Jane Doe\",\n-     \"isAdmin\": true,\n+     \"fullName\": null,\n+     \"isAdmin\": null,\n    },\n  }\n    at Object.<anonymous> (/Users/davidrivera/Downloads/n8n-make-converter/__tests__/unit/converters/parameter-processor.test.ts:252:22)\n    at Promise.then.completed (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"NodeParameterProcessor evaluateExpressions should handle nested parameters with expressions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle nested parameters with expressions"},{"ancestorTitles":["NodeParameterProcessor","evaluateExpressions"],"duration":1,"failureDetails":[{"matcherResult":{"actual":{"conditional":"$if($json.stock > 0, \"In stock\", \"Out of stock\")","upperName":"$str.upper($json.name)","firstItem":"$array.first($json.items)"},"expected":{"conditional":"In stock","upperName":"TEST PRODUCT","firstItem":"item1"},"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 3\n\n  Object {\n-   \"conditional\": \"In stock\",\n-   \"firstItem\": \"item1\",\n-   \"upperName\": \"TEST PRODUCT\",\n+   \"conditional\": \"$if($json.stock > 0, \\\"In stock\\\", \\\"Out of stock\\\")\",\n+   \"firstItem\": \"$array.first($json.items)\",\n+   \"upperName\": \"$str.upper($json.name)\",\n  }","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 3\n\n  Object {\n-   \"conditional\": \"In stock\",\n-   \"firstItem\": \"item1\",\n-   \"upperName\": \"TEST PRODUCT\",\n+   \"conditional\": \"$if($json.stock > 0, \\\"In stock\\\", \\\"Out of stock\\\")\",\n+   \"firstItem\": \"$array.first($json.items)\",\n+   \"upperName\": \"$str.upper($json.name)\",\n  }\n    at Object.<anonymous> (/Users/davidrivera/Downloads/n8n-make-converter/__tests__/unit/converters/parameter-processor.test.ts:276:22)\n    at Promise.then.completed (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"NodeParameterProcessor evaluateExpressions should handle advanced function evaluations","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle advanced function evaluations"}],"endTime":1741926245161,"message":"  ● NodeParameterProcessor › convertN8nToMakeParameters › should handle embedded expressions in strings\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 2\n    + Received  + 2\n\n      Object {\n    -   \"greeting\": \"Hello, {{1.name}}!\",\n    -   \"message\": \"Your order #{{1.orderId}} will arrive on {{formatDate(1.deliveryDate, \\\"MMM Do\\\")}}\",\n    +   \"greeting\": \"Hello, {{ 1.name }}!\",\n    +   \"message\": \"Your order #{{ 1.orderId }} will arrive on {{ formatDate(1.deliveryDate, \\\"MMM Do\\\") }}\",\n      }\n\n      86 |\n      87 |       const result = NodeParameterProcessor.convertN8nToMakeParameters(params);\n    > 88 |       expect(result).toEqual({\n         |                      ^\n      89 |         greeting: 'Hello, {{1.name}}!',\n      90 |         message: 'Your order #{{1.orderId}} will arrive on {{formatDate(1.deliveryDate, \"MMM Do\")}}'\n      91 |       });\n\n      at Object.<anonymous> (__tests__/unit/converters/parameter-processor.test.ts:88:22)\n\n  ● NodeParameterProcessor › convertMakeToN8nParameters › should handle embedded expressions in strings\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 2\n    + Received  + 2\n\n      Object {\n    -   \"greeting\": \"Hello, {{ $json.name }}!\",\n    -   \"message\": \"Your order #{{ $json.orderId }} will arrive on {{ $date.format($json.deliveryDate, \\\"MMM Do\\\") }}!\",\n    +   \"greeting\": \"Hello, ={{ $json.name }}!\",\n    +   \"message\": \"Your order #={{ $json.orderId }} will arrive on ={{ $date.format($json.deliveryDate, \\\"MMM Do\\\") }}\",\n      }\n\n      177 |\n      178 |       const result = NodeParameterProcessor.convertMakeToN8nParameters(params);\n    > 179 |       expect(result).toEqual({\n          |                      ^\n      180 |         greeting: 'Hello, {{ $json.name }}!',\n      181 |         message: 'Your order #{{ $json.orderId }} will arrive on {{ $date.format($json.deliveryDate, \"MMM Do\") }}!'\n      182 |       });\n\n      at Object.<anonymous> (__tests__/unit/converters/parameter-processor.test.ts:179:22)\n\n  ● NodeParameterProcessor › identifyExpressionsForReview › should identify complex expressions that need review\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected value: \"Node type, parameter complexExpression1\"\n    Received array: [\"Node simpleExpression\", \"Node complexExpression1\", \"Node complexExpression2\", \"Node nested, parameter complexDate\"]\n\n      199 |       \n      200 |       // Should identify the complex expressions but not the simple one\n    > 201 |       expect(Object.keys(result)).toContain('Node type, parameter complexExpression1');\n          |                                   ^\n      202 |       expect(Object.keys(result)).toContain('Node type, parameter complexExpression2');\n      203 |       expect(Object.keys(result)).not.toContain('Node type, parameter simpleExpression');\n      204 |       \n\n      at Object.<anonymous> (__tests__/unit/converters/parameter-processor.test.ts:201:35)\n\n  ● NodeParameterProcessor › evaluateExpressions › should evaluate expressions using the provided context\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 5\n    + Received  + 2\n\n      Object {\n    -   \"greeting\": \"Hello, John\",\n    -   \"items\": Array [\n    -     \"Product 1\",\n    -     \"Product 2\",\n    -   ],\n    +   \"greeting\": \"\\\"Hello, \\\" + $json.name\",\n    +   \"items\": null,\n      }\n\n      227 |\n      228 |       const result = NodeParameterProcessor.evaluateExpressions(params, context);\n    > 229 |       expect(result).toEqual({\n          |                      ^\n      230 |         greeting: 'Hello, John',\n      231 |         items: ['Product 1', 'Product 2']\n      232 |       });\n\n      at Object.<anonymous> (__tests__/unit/converters/parameter-processor.test.ts:229:22)\n\n  ● NodeParameterProcessor › evaluateExpressions › should handle nested parameters with expressions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 2\n    + Received  + 2\n\n      Object {\n        \"user\": Object {\n    -     \"fullName\": \"Jane Doe\",\n    -     \"isAdmin\": true,\n    +     \"fullName\": null,\n    +     \"isAdmin\": null,\n        },\n      }\n\n      250 |\n      251 |       const result = NodeParameterProcessor.evaluateExpressions(params, context);\n    > 252 |       expect(result).toEqual({\n          |                      ^\n      253 |         user: {\n      254 |           fullName: 'Jane Doe',\n      255 |           isAdmin: true\n\n      at Object.<anonymous> (__tests__/unit/converters/parameter-processor.test.ts:252:22)\n\n  ● NodeParameterProcessor › evaluateExpressions › should handle advanced function evaluations\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 3\n\n      Object {\n    -   \"conditional\": \"In stock\",\n    -   \"firstItem\": \"item1\",\n    -   \"upperName\": \"TEST PRODUCT\",\n    +   \"conditional\": \"$if($json.stock > 0, \\\"In stock\\\", \\\"Out of stock\\\")\",\n    +   \"firstItem\": \"$array.first($json.items)\",\n    +   \"upperName\": \"$str.upper($json.name)\",\n      }\n\n      274 |\n      275 |       const result = NodeParameterProcessor.evaluateExpressions(params, context);\n    > 276 |       expect(result).toEqual({\n          |                      ^\n      277 |         conditional: 'In stock',\n      278 |         upperName: 'TEST PRODUCT',\n      279 |         firstItem: 'item1'\n\n      at Object.<anonymous> (__tests__/unit/converters/parameter-processor.test.ts:276:22)\n","name":"/Users/davidrivera/Downloads/n8n-make-converter/__tests__/unit/converters/parameter-processor.test.ts","startTime":1741926205676,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["node-mapping","getNodeMappings"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"node-mapping getNodeMappings should return base mappings when no user mappings exist","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return base mappings when no user mappings exist"},{"ancestorTitles":["node-mapping","getNodeMappings"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"node-mapping getNodeMappings should combine base mappings with user mappings","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should combine base mappings with user mappings"},{"ancestorTitles":["node-mapping","getNodeMappings"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"node-mapping getNodeMappings should prioritize user mappings over base mappings","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should prioritize user mappings over base mappings"},{"ancestorTitles":["node-mapping","getNodeMappings"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"node-mapping getNodeMappings should handle server-side rendering","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle server-side rendering"},{"ancestorTitles":["node-mapping","baseNodeMapping"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"node-mapping baseNodeMapping should contain mappings for common n8n nodes","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should contain mappings for common n8n nodes"},{"ancestorTitles":["node-mapping","baseNodeMapping"],"duration":72,"failureDetails":[],"failureMessages":[],"fullName":"node-mapping baseNodeMapping should contain mappings for common Make.com modules","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should contain mappings for common Make.com modules"},{"ancestorTitles":["node-mapping","baseNodeMapping"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"node-mapping baseNodeMapping should have consistent bidirectional mappings","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should have consistent bidirectional mappings"},{"ancestorTitles":["node-mapping","baseNodeMapping"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"node-mapping baseNodeMapping should have parameter mappings for each node type","invocations":1,"location":null,"numPassingAsserts":32,"retryReasons":[],"status":"passed","title":"should have parameter mappings for each node type"}],"endTime":1741926245408,"message":"","name":"/Users/davidrivera/Downloads/n8n-make-converter/__tests__/lib/mappings/node-mapping.test.ts","startTime":1741926245173,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Schema Validation Tests","Make.com Workflow Schema"],"duration":160,"failureDetails":[],"failureMessages":[],"fullName":"Schema Validation Tests Make.com Workflow Schema should validate a correct Make.com workflow","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate a correct Make.com workflow"},{"ancestorTitles":["Schema Validation Tests","Make.com Workflow Schema"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Schema Validation Tests Make.com Workflow Schema should detect missing required fields in Make.com workflow","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should detect missing required fields in Make.com workflow"},{"ancestorTitles":["Schema Validation Tests","n8n Workflow Schema"],"duration":34,"failureDetails":[],"failureMessages":[],"fullName":"Schema Validation Tests n8n Workflow Schema should validate a correct n8n workflow","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate a correct n8n workflow"},{"ancestorTitles":["Schema Validation Tests","n8n Workflow Schema"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Schema Validation Tests n8n Workflow Schema should detect missing required fields in n8n workflow","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should detect missing required fields in n8n workflow"}],"endTime":1741926245806,"message":"","name":"/Users/davidrivera/Downloads/n8n-make-converter/__tests__/unit/schema-validation.test.ts","startTime":1741926245412,"status":"passed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1741926279361,"message":"  ● Test suite failed to run\n\n    \u001b[96mlib/converters/make-to-n8n.ts\u001b[0m:\u001b[93m99\u001b[0m:\u001b[93m11\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'info' does not exist on type 'typeof Logger'.\n\n    \u001b[7m99\u001b[0m    logger.info('Using enhanced node mapper for conversion');\n    \u001b[7m  \u001b[0m \u001b[91m          ~~~~\u001b[0m\n    \u001b[96mlib/converters/make-to-n8n.ts\u001b[0m:\u001b[93m102\u001b[0m:\u001b[93m11\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'info' does not exist on type 'typeof Logger'.\n\n    \u001b[7m102\u001b[0m    logger.info('Using basic node mapper for conversion');\n    \u001b[7m   \u001b[0m \u001b[91m          ~~~~\u001b[0m\n","name":"/Users/davidrivera/Downloads/n8n-make-converter/__tests__/unit/converters/make-to-n8n.test.ts","startTime":1741926279361,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1741926279361,"message":"  ● Test suite failed to run\n\n    \u001b[96mlib/converters/n8n-to-make.ts\u001b[0m:\u001b[93m148\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'info' does not exist on type 'typeof Logger'.\n\n    \u001b[7m148\u001b[0m       logger.info('Using enhanced node mapper for conversion');\n    \u001b[7m   \u001b[0m \u001b[91m             ~~~~\u001b[0m\n    \u001b[96mlib/converters/n8n-to-make.ts\u001b[0m:\u001b[93m151\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'info' does not exist on type 'typeof Logger'.\n\n    \u001b[7m151\u001b[0m       logger.info('Using basic node mapper for conversion');\n    \u001b[7m   \u001b[0m \u001b[91m             ~~~~\u001b[0m\n","name":"/Users/davidrivera/Downloads/n8n-make-converter/__tests__/examples/convert-n8n-to-make.test.ts","startTime":1741926279361,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1741926279361,"message":"  ● Test suite failed to run\n\n    \u001b[96mlib/converters/make-to-n8n.ts\u001b[0m:\u001b[93m99\u001b[0m:\u001b[93m11\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'info' does not exist on type 'typeof Logger'.\n\n    \u001b[7m99\u001b[0m    logger.info('Using enhanced node mapper for conversion');\n    \u001b[7m  \u001b[0m \u001b[91m          ~~~~\u001b[0m\n    \u001b[96mlib/converters/make-to-n8n.ts\u001b[0m:\u001b[93m102\u001b[0m:\u001b[93m11\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'info' does not exist on type 'typeof Logger'.\n\n    \u001b[7m102\u001b[0m    logger.info('Using basic node mapper for conversion');\n    \u001b[7m   \u001b[0m \u001b[91m          ~~~~\u001b[0m\n","name":"/Users/davidrivera/Downloads/n8n-make-converter/__tests__/lib/converters/make-to-n8n.test.ts","startTime":1741926279361,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1741926279361,"message":"  ● Test suite failed to run\n\n    \u001b[96mlib/converters/n8n-to-make.ts\u001b[0m:\u001b[93m148\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'info' does not exist on type 'typeof Logger'.\n\n    \u001b[7m148\u001b[0m       logger.info('Using enhanced node mapper for conversion');\n    \u001b[7m   \u001b[0m \u001b[91m             ~~~~\u001b[0m\n    \u001b[96mlib/converters/n8n-to-make.ts\u001b[0m:\u001b[93m151\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'info' does not exist on type 'typeof Logger'.\n\n    \u001b[7m151\u001b[0m       logger.info('Using basic node mapper for conversion');\n    \u001b[7m   \u001b[0m \u001b[91m             ~~~~\u001b[0m\n","name":"/Users/davidrivera/Downloads/n8n-make-converter/__tests__/lib/converters/n8n-to-make.test.ts","startTime":1741926279361,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1741926279361,"message":"  ● Test suite failed to run\n\n    \u001b[96m__tests__/unit/node-mappings/node-mapper.test.ts\u001b[0m:\u001b[93m1\u001b[0m:\u001b[93m59\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2305: \u001b[0mModule '\"../../../lib/node-mappings/node-mapper\"' has no exported member 'ConversionResult'.\n\n    \u001b[7m1\u001b[0m import { NodeMapper, NodeMappingError, ConversionOptions, ConversionResult } from '../../../lib/node-mappings/node-mapper';\n    \u001b[7m \u001b[0m \u001b[91m                                                          ~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96m__tests__/unit/node-mappings/node-mapper.test.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m7\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2353: \u001b[0mObject literal may only specify known properties, and 'n8nNodeType' does not exist in type 'NodeMapping'.\n\n    \u001b[7m14\u001b[0m       n8nNodeType: 'n8n-nodes-base.httpRequest',\n    \u001b[7m  \u001b[0m \u001b[91m      ~~~~~~~~~~~\u001b[0m\n    \u001b[96m__tests__/unit/node-mappings/node-mapper.test.ts\u001b[0m:\u001b[93m151\u001b[0m:\u001b[93m23\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'n8nDisplayName' does not exist on type 'NodeMapping'.\n\n    \u001b[7m151\u001b[0m       expect(mapping?.n8nDisplayName).toBe('HTTP Request');\n    \u001b[7m   \u001b[0m \u001b[91m                      ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96m__tests__/unit/node-mappings/node-mapper.test.ts\u001b[0m:\u001b[93m164\u001b[0m:\u001b[93m23\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'makeModuleName' does not exist on type 'NodeMapping'.\n\n    \u001b[7m164\u001b[0m       expect(mapping?.makeModuleName).toBe('HTTP');\n    \u001b[7m   \u001b[0m \u001b[91m                      ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96m__tests__/unit/node-mappings/node-mapper.test.ts\u001b[0m:\u001b[93m339\u001b[0m:\u001b[93m9\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2353: \u001b[0mObject literal may only specify known properties, and 'type' does not exist in type 'ParameterMapping'.\n\n    \u001b[7m339\u001b[0m         type: 'boolean'\n    \u001b[7m   \u001b[0m \u001b[91m        ~~~~\u001b[0m\n    \u001b[96m__tests__/unit/node-mappings/node-mapper.test.ts\u001b[0m:\u001b[93m346\u001b[0m:\u001b[93m9\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'ParameterMapping' is not assignable to parameter of type 'string'.\n\n    \u001b[7m346\u001b[0m         paramMapping\n    \u001b[7m   \u001b[0m \u001b[91m        ~~~~~~~~~~~~\u001b[0m\n    \u001b[96m__tests__/unit/node-mappings/node-mapper.test.ts\u001b[0m:\u001b[93m355\u001b[0m:\u001b[93m9\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2353: \u001b[0mObject literal may only specify known properties, and 'type' does not exist in type 'ParameterMapping'.\n\n    \u001b[7m355\u001b[0m         type: 'string',\n    \u001b[7m   \u001b[0m \u001b[91m        ~~~~\u001b[0m\n    \u001b[96m__tests__/unit/node-mappings/node-mapper.test.ts\u001b[0m:\u001b[93m363\u001b[0m:\u001b[93m9\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'ParameterMapping' is not assignable to parameter of type 'string'.\n\n    \u001b[7m363\u001b[0m         paramMapping\n    \u001b[7m   \u001b[0m \u001b[91m        ~~~~~~~~~~~~\u001b[0m\n    \u001b[96m__tests__/unit/node-mappings/node-mapper.test.ts\u001b[0m:\u001b[93m378\u001b[0m:\u001b[93m9\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'ParameterMapping' is not assignable to parameter of type 'string'.\n\n    \u001b[7m378\u001b[0m         paramMapping\n    \u001b[7m   \u001b[0m \u001b[91m        ~~~~~~~~~~~~\u001b[0m\n","name":"/Users/davidrivera/Downloads/n8n-make-converter/__tests__/unit/node-mappings/node-mapper.test.ts","startTime":1741926279361,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Expression Evaluator","isExpression"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"Expression Evaluator isExpression should identify n8n expressions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should identify n8n expressions"},{"ancestorTitles":["Expression Evaluator","isExpression"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Expression Evaluator isExpression should identify Make.com expressions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should identify Make.com expressions"},{"ancestorTitles":["Expression Evaluator","isExpression"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Expression Evaluator isExpression should return false for non-expression strings","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return false for non-expression strings"},{"ancestorTitles":["Expression Evaluator","isExpression"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Expression Evaluator isExpression should return false for non-string values","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return false for non-string values"},{"ancestorTitles":["Expression Evaluator","extractExpressionContent"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Expression Evaluator extractExpressionContent should extract content from n8n expressions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract content from n8n expressions"},{"ancestorTitles":["Expression Evaluator","extractExpressionContent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Expression Evaluator extractExpressionContent should extract content from Make.com expressions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract content from Make.com expressions"},{"ancestorTitles":["Expression Evaluator","extractExpressionContent"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Expression Evaluator extractExpressionContent should return the original string if not an expression","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return the original string if not an expression"},{"ancestorTitles":["Expression Evaluator","extractExpressionContent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Expression Evaluator extractExpressionContent should handle empty or invalid inputs","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle empty or invalid inputs"},{"ancestorTitles":["Expression Evaluator","evaluateExpression"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Expression Evaluator evaluateExpression should evaluate simple variable access expressions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should evaluate simple variable access expressions"},{"ancestorTitles":["Expression Evaluator","evaluateExpression"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Expression Evaluator evaluateExpression should evaluate nested property access","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should evaluate nested property access"},{"ancestorTitles":["Expression Evaluator","evaluateExpression"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"Expression Evaluator evaluateExpression should evaluate environment variables","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should evaluate environment variables"},{"ancestorTitles":["Expression Evaluator","evaluateExpression"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Expression Evaluator evaluateExpression should evaluate workflow metadata","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should evaluate workflow metadata"},{"ancestorTitles":["Expression Evaluator","evaluateExpression"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Expression Evaluator evaluateExpression should evaluate simple arithmetic expressions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should evaluate simple arithmetic expressions"},{"ancestorTitles":["Expression Evaluator","evaluateExpression"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"Expression Evaluator evaluateExpression should handle invalid expressions gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalid expressions gracefully"},{"ancestorTitles":["Expression Evaluator","evaluateExpression"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Expression Evaluator evaluateExpression should return null for empty expressions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return null for empty expressions"},{"ancestorTitles":["Expression Evaluator","processValueWithPossibleExpression"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Expression Evaluator processValueWithPossibleExpression should process expression values","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should process expression values"},{"ancestorTitles":["Expression Evaluator","processValueWithPossibleExpression"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Expression Evaluator processValueWithPossibleExpression should pass through non-expression values","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should pass through non-expression values"},{"ancestorTitles":["Expression Evaluator","processObjectWithExpressions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Expression Evaluator processObjectWithExpressions should process expressions in objects","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should process expressions in objects"},{"ancestorTitles":["Expression Evaluator","processObjectWithExpressions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Expression Evaluator processObjectWithExpressions should process expressions in arrays","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should process expressions in arrays"},{"ancestorTitles":["Expression Evaluator","processObjectWithExpressions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Expression Evaluator processObjectWithExpressions should handle null and undefined values","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle null and undefined values"}],"endTime":1741926275880,"message":"","name":"/Users/davidrivera/Downloads/n8n-make-converter/__tests__/unit/expression-evaluator/expression-evaluator.test.ts","startTime":1741926205658,"status":"passed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1741926279361,"message":"  ● Test suite failed to run\n\n    \u001b[96m__tests__/integration/workflow-converter.test.ts\u001b[0m:\u001b[93m24\u001b[0m:\u001b[93m11\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2353: \u001b[0mObject literal may only specify known properties, and '\"n8nNodeType\"' does not exist in type 'NodeMapping'.\n\n    \u001b[7m24\u001b[0m           \"n8nNodeType\": \"n8n-nodes-base.httpRequest\",\n    \u001b[7m  \u001b[0m \u001b[91m          ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96m__tests__/integration/workflow-converter.test.ts\u001b[0m:\u001b[93m67\u001b[0m:\u001b[93m80\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => NodeMappingDatabase' is not assignable to parameter of type '() => Promise<NodeMappingDatabase>'.\n      Type 'NodeMappingDatabase' is missing the following properties from type 'Promise<NodeMappingDatabase>': then, catch, finally, [Symbol.toStringTag]\n\n    \u001b[7m67\u001b[0m     jest.spyOn(NodeMappingLoader.prototype, 'loadMappings').mockImplementation(() => mockMappingDatabase);\n    \u001b[7m  \u001b[0m \u001b[91m                                                                               ~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96m__tests__/integration/workflow-converter.test.ts\u001b[0m:\u001b[93m95\u001b[0m:\u001b[93m25\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'definition' does not exist on type 'MakeModule'.\n\n    \u001b[7m95\u001b[0m       expect(makeModule.definition.type).toBe('get');\n    \u001b[7m  \u001b[0m \u001b[91m                        ~~~~~~~~~~\u001b[0m\n    \u001b[96m__tests__/integration/workflow-converter.test.ts\u001b[0m:\u001b[93m96\u001b[0m:\u001b[93m25\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'definition' does not exist on type 'MakeModule'.\n\n    \u001b[7m96\u001b[0m       expect(makeModule.definition.parameters).toBeDefined();\n    \u001b[7m  \u001b[0m \u001b[91m                        ~~~~~~~~~~\u001b[0m\n    \u001b[96m__tests__/integration/workflow-converter.test.ts\u001b[0m:\u001b[93m97\u001b[0m:\u001b[93m25\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'definition' does not exist on type 'MakeModule'.\n\n    \u001b[7m97\u001b[0m       expect(makeModule.definition.parameters?.url).toBe('https://example.com/api');\n    \u001b[7m  \u001b[0m \u001b[91m                        ~~~~~~~~~~\u001b[0m\n    \u001b[96m__tests__/integration/workflow-converter.test.ts\u001b[0m:\u001b[93m98\u001b[0m:\u001b[93m25\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'definition' does not exist on type 'MakeModule'.\n\n    \u001b[7m98\u001b[0m       expect(makeModule.definition.parameters?.headers).toEqual({\n    \u001b[7m  \u001b[0m \u001b[91m                        ~~~~~~~~~~\u001b[0m\n    \u001b[96m__tests__/integration/workflow-converter.test.ts\u001b[0m:\u001b[93m239\u001b[0m:\u001b[93m50\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ id: number; name: string; type: string; bundleId: string; definition: { type: string; parameters: { url: string; headers: { 'Content-Type': string; }; }; }; }' is not assignable to parameter of type 'MakeModule'.\n      Property 'parameters' is missing in type '{ id: number; name: string; type: string; bundleId: string; definition: { type: string; parameters: { url: string; headers: { 'Content-Type': string; }; }; }; }' but required in type 'MakeModule'.\n\n    \u001b[7m239\u001b[0m       const n8nNode = convertMakeModuleToN8nNode(makeModule, { nodeMapper });\n    \u001b[7m   \u001b[0m \u001b[91m                                                 ~~~~~~~~~~\u001b[0m\n\n      \u001b[96mlib/node-mappings/node-types.ts\u001b[0m:\u001b[93m50\u001b[0m:\u001b[93m3\u001b[0m\n        \u001b[7m50\u001b[0m   parameters: Record<string, any>;\n        \u001b[7m  \u001b[0m \u001b[96m  ~~~~~~~~~~\u001b[0m\n        'parameters' is declared here.\n","name":"/Users/davidrivera/Downloads/n8n-make-converter/__tests__/integration/workflow-converter.test.ts","startTime":1741926279361,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1741926279361,"message":"  ● Test suite failed to run\n\n    \u001b[96mlib/workflow-converter.ts\u001b[0m:\u001b[93m76\u001b[0m:\u001b[93m12\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'info' does not exist on type 'typeof Logger'.\n\n    \u001b[7m76\u001b[0m     logger.info(`Mappings loaded from lib/mappings/node-mapping.ts`);\n    \u001b[7m  \u001b[0m \u001b[91m           ~~~~\u001b[0m\n    \u001b[96mlib/workflow-converter.ts\u001b[0m:\u001b[93m77\u001b[0m:\u001b[93m12\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'info' does not exist on type 'typeof Logger'.\n\n    \u001b[7m77\u001b[0m     logger.info(`Loaded ${Object.keys(mappings.n8nToMake || {}).length} n8n->make mappings and ${Object.keys(mappings.makeToN8n || {}).length} make->n8n mappings`);\n    \u001b[7m  \u001b[0m \u001b[91m           ~~~~\u001b[0m\n    \u001b[96mlib/workflow-converter.ts\u001b[0m:\u001b[93m81\u001b[0m:\u001b[93m12\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'error' does not exist on type 'typeof Logger'.\n\n    \u001b[7m81\u001b[0m     logger.error(`Failed to verify mappings: ${error instanceof Error ? error.message : String(error)}`);\n    \u001b[7m  \u001b[0m \u001b[91m           ~~~~~\u001b[0m\n    \u001b[96mlib/workflow-converter.ts\u001b[0m:\u001b[93m227\u001b[0m:\u001b[93m35\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mapN8nNodeToMake' does not exist on type 'NodeMapper'.\n\n    \u001b[7m227\u001b[0m     const makeModule = nodeMapper.mapN8nNodeToMake(node);\n    \u001b[7m   \u001b[0m \u001b[91m                                  ~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mlib/workflow-converter.ts\u001b[0m:\u001b[93m239\u001b[0m:\u001b[93m12\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'error' does not exist on type 'typeof Logger'.\n\n    \u001b[7m239\u001b[0m     logger.error(`Error converting n8n node to Make module: ${error instanceof Error ? error.message : String(error)}`);\n    \u001b[7m   \u001b[0m \u001b[91m           ~~~~~\u001b[0m\n    \u001b[96mlib/workflow-converter.ts\u001b[0m:\u001b[93m246\u001b[0m:\u001b[93m7\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2353: \u001b[0mObject literal may only specify known properties, and 'bundleId' does not exist in type 'MakeModule'.\n\n    \u001b[7m246\u001b[0m       bundleId: \"placeholder\",\n    \u001b[7m   \u001b[0m \u001b[91m      ~~~~~~~~\u001b[0m\n    \u001b[96mlib/workflow-converter.ts\u001b[0m:\u001b[93m278\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'mapMakeNodeToN8n' does not exist on type 'NodeMapper'.\n\n    \u001b[7m278\u001b[0m     const n8nNode = nodeMapper.mapMakeNodeToN8n(module);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mlib/workflow-converter.ts\u001b[0m:\u001b[93m290\u001b[0m:\u001b[93m12\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'error' does not exist on type 'typeof Logger'.\n\n    \u001b[7m290\u001b[0m     logger.error(`Error converting Make module to n8n node: ${error instanceof Error ? error.message : String(error)}`);\n    \u001b[7m   \u001b[0m \u001b[91m           ~~~~~\u001b[0m\n    \u001b[96mlib/workflow-converter.ts\u001b[0m:\u001b[93m295\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'metadata' does not exist on type 'MakeModule'.\n\n    \u001b[7m295\u001b[0m       name: module.name || (module.metadata?.name || \"Unnamed node\"),\n    \u001b[7m   \u001b[0m \u001b[91m                                   ~~~~~~~~\u001b[0m\n    \u001b[96mlib/workflow-converter.ts\u001b[0m:\u001b[93m298\u001b[0m:\u001b[93m26\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'definition' does not exist on type 'MakeModule'.\n\n    \u001b[7m298\u001b[0m       parameters: module.definition?.parameters || {}\n    \u001b[7m   \u001b[0m \u001b[91m                         ~~~~~~~~~~\u001b[0m\n","name":"/Users/davidrivera/Downloads/n8n-make-converter/__tests__/integration/workflow-validation.test.ts","startTime":1741926279361,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1741926279361,"message":"  ● Test suite failed to run\n\n    \u001b[96mlib/converters/n8n-to-make.ts\u001b[0m:\u001b[93m148\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'info' does not exist on type 'typeof Logger'.\n\n    \u001b[7m148\u001b[0m       logger.info('Using enhanced node mapper for conversion');\n    \u001b[7m   \u001b[0m \u001b[91m             ~~~~\u001b[0m\n    \u001b[96mlib/converters/n8n-to-make.ts\u001b[0m:\u001b[93m151\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'info' does not exist on type 'typeof Logger'.\n\n    \u001b[7m151\u001b[0m       logger.info('Using basic node mapper for conversion');\n    \u001b[7m   \u001b[0m \u001b[91m             ~~~~\u001b[0m\n","name":"/Users/davidrivera/Downloads/n8n-make-converter/__tests__/integration/workflow-conversion.test.ts","startTime":1741926279361,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1741926279361,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /Users/davidrivera/Downloads/n8n-make-converter/__tests__/manual-test.test.js:5\n    import { convertWorkflow } from '../lib/workflow-converter';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)\n","name":"/Users/davidrivera/Downloads/n8n-make-converter/__tests__/manual-test.test.js","startTime":1741926279361,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["NodeParameterProcessor","convertN8nToMakeParameters"],"duration":31,"failureDetails":[{"matcherResult":{"actual":"{{1.token}}","expected":"{{$json.token}}","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"{{$json.token}}\"\nReceived: \"{{1.token}}\"","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"{{$json.token}}\"\nReceived: \"{{1.token}}\"\n    at Object.<anonymous> (/Users/davidrivera/Downloads/n8n-make-converter/__tests__/unit/expression-evaluator/parameter-processor.test.ts:23:44)\n    at Promise.then.completed (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"NodeParameterProcessor convertN8nToMakeParameters should convert n8n expressions to Make.com format","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should convert n8n expressions to Make.com format"},{"ancestorTitles":["NodeParameterProcessor","convertN8nToMakeParameters"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"NodeParameterProcessor convertN8nToMakeParameters should handle null and undefined parameters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle null and undefined parameters"},{"ancestorTitles":["NodeParameterProcessor","convertN8nToMakeParameters"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"NodeParameterProcessor convertN8nToMakeParameters should pass through non-object parameters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should pass through non-object parameters"},{"ancestorTitles":["NodeParameterProcessor","convertMakeToN8nParameters"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"NodeParameterProcessor convertMakeToN8nParameters should convert Make.com expressions to n8n format","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should convert Make.com expressions to n8n format"},{"ancestorTitles":["NodeParameterProcessor","convertMakeToN8nParameters"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"NodeParameterProcessor convertMakeToN8nParameters should handle null and undefined parameters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle null and undefined parameters"},{"ancestorTitles":["NodeParameterProcessor","convertMakeToN8nParameters"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"NodeParameterProcessor convertMakeToN8nParameters should pass through non-object parameters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should pass through non-object parameters"},{"ancestorTitles":["NodeParameterProcessor","identifyExpressionsForReview"],"duration":1,"failureDetails":[{"matcherResult":{"message":"expect(received).toContain(expected) // indexOf\n\nExpected value:  \"url\"\nReceived object: {\"Node headers, parameter Authorization\": {\"nodeType\": \"unknown\", \"reason\": \"Complex expression needs review\"}}","pass":false}}],"failureMessages":["Error: expect(received).toContain(expected) // indexOf\n\nExpected value:  \"url\"\nReceived object: {\"Node headers, parameter Authorization\": {\"nodeType\": \"unknown\", \"reason\": \"Complex expression needs review\"}}\n    at Object.<anonymous> (/Users/davidrivera/Downloads/n8n-make-converter/__tests__/unit/expression-evaluator/parameter-processor.test.ts:94:22)\n    at Promise.then.completed (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"NodeParameterProcessor identifyExpressionsForReview should identify paths to expressions in parameters","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should identify paths to expressions in parameters"},{"ancestorTitles":["NodeParameterProcessor","identifyExpressionsForReview"],"duration":0,"failureDetails":[{"matcherResult":{"actual":{},"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\nExpected: []\nReceived: {}","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\nExpected: []\nReceived: {}\n    at Object.<anonymous> (/Users/davidrivera/Downloads/n8n-make-converter/__tests__/unit/expression-evaluator/parameter-processor.test.ts:112:22)\n    at Promise.then.completed (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/davidrivera/Downloads/n8n-make-converter/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"NodeParameterProcessor identifyExpressionsForReview should return empty array for parameters without expressions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return empty array for parameters without expressions"},{"ancestorTitles":["NodeParameterProcessor","evaluateExpressions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"NodeParameterProcessor evaluateExpressions should evaluate expressions in parameters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should evaluate expressions in parameters"},{"ancestorTitles":["NodeParameterProcessor","evaluateExpressions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"NodeParameterProcessor evaluateExpressions should handle nested objects with expressions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle nested objects with expressions"}],"endTime":1741926276114,"message":"  ● NodeParameterProcessor › convertN8nToMakeParameters › should convert n8n expressions to Make.com format\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"{{$json.token}}\"\n    Received: \"{{1.token}}\"\n\n      21 |       // In our implementation, we're not handling string concatenation yet\n      22 |       // So we'll just check that the expressions are converted correctly\n    > 23 |       expect(result.headers.Authorization).toBe('{{$json.token}}');\n         |                                            ^\n      24 |       expect(result.nested.value).toBe('{{$workflow.id}}');\n      25 |       expect(result.method).toBe('GET');\n      26 |       expect(result['Content-Type']).toBeUndefined();\n\n      at Object.<anonymous> (__tests__/unit/expression-evaluator/parameter-processor.test.ts:23:44)\n\n  ● NodeParameterProcessor › identifyExpressionsForReview › should identify paths to expressions in parameters\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected value:  \"url\"\n    Received object: {\"Node headers, parameter Authorization\": {\"nodeType\": \"unknown\", \"reason\": \"Complex expression needs review\"}}\n\n      92 |       \n      93 |       // Our implementation now checks for includes() rather than exact matches\n    > 94 |       expect(result).toContain('url');\n         |                      ^\n      95 |       expect(result).toContain('headers.Authorization');\n      96 |       expect(result).toContain('nested.deepNested.value');\n      97 |       expect(result).not.toContain('simple');\n\n      at Object.<anonymous> (__tests__/unit/expression-evaluator/parameter-processor.test.ts:94:22)\n\n  ● NodeParameterProcessor › identifyExpressionsForReview › should return empty array for parameters without expressions\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: []\n    Received: {}\n\n      110 |       const result = NodeParameterProcessor.identifyExpressionsForReview(params);\n      111 |       \n    > 112 |       expect(result).toEqual([]);\n          |                      ^\n      113 |     });\n      114 |   });\n      115 |\n\n      at Object.<anonymous> (__tests__/unit/expression-evaluator/parameter-processor.test.ts:112:22)\n","name":"/Users/davidrivera/Downloads/n8n-make-converter/__tests__/unit/expression-evaluator/parameter-processor.test.ts","startTime":1741926205685,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1741926279361,"message":"  ● Test suite failed to run\n\n    \u001b[96mlib/converters/n8n-to-make.ts\u001b[0m:\u001b[93m148\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'info' does not exist on type 'typeof Logger'.\n\n    \u001b[7m148\u001b[0m       logger.info('Using enhanced node mapper for conversion');\n    \u001b[7m   \u001b[0m \u001b[91m             ~~~~\u001b[0m\n    \u001b[96mlib/converters/n8n-to-make.ts\u001b[0m:\u001b[93m151\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'info' does not exist on type 'typeof Logger'.\n\n    \u001b[7m151\u001b[0m       logger.info('Using basic node mapper for conversion');\n    \u001b[7m   \u001b[0m \u001b[91m             ~~~~\u001b[0m\n","name":"/Users/davidrivera/Downloads/n8n-make-converter/__tests__/lib/converter.test.ts","startTime":1741926279361,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1741926279361,"message":"  ● Test suite failed to run\n\n    \u001b[96mlib/converters/n8n-to-make.ts\u001b[0m:\u001b[93m148\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'info' does not exist on type 'typeof Logger'.\n\n    \u001b[7m148\u001b[0m       logger.info('Using enhanced node mapper for conversion');\n    \u001b[7m   \u001b[0m \u001b[91m             ~~~~\u001b[0m\n    \u001b[96mlib/converters/n8n-to-make.ts\u001b[0m:\u001b[93m151\u001b[0m:\u001b[93m14\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'info' does not exist on type 'typeof Logger'.\n\n    \u001b[7m151\u001b[0m       logger.info('Using basic node mapper for conversion');\n    \u001b[7m   \u001b[0m \u001b[91m             ~~~~\u001b[0m\n","name":"/Users/davidrivera/Downloads/n8n-make-converter/__tests__/unit/converters/n8n-to-make.test.ts","startTime":1741926279361,"status":"failed","summary":""}],"wasInterrupted":false}
